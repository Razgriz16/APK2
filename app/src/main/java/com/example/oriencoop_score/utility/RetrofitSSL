    /* ********** OkHttpClient for SSL certificate **********
    @Provides
    @Singleton
    fun provideOkHttpClient(@ApplicationContext context: Context): OkHttpClient {
        // Load the self-signed certificate from res/raw
        val certificateInputStream: InputStream = context.resources.openRawResource(R.raw.api_certificate)
        val certificateFactory = CertificateFactory.getInstance("X.509")
        val certificate: Certificate = certificateFactory.generateCertificate(certificateInputStream)
        certificateInputStream.close()

        // Create a KeyStore and add the certificate
        val keyStore = KeyStore.getInstance(KeyStore.getDefaultType())
        keyStore.load(null, null)
        keyStore.setCertificateEntry("ca", certificate)

        // Create a TrustManager that trusts the certificate
        val trustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm())
        trustManagerFactory.init(keyStore)
        val trustManagers = trustManagerFactory.trustManagers

        // Initialize SSLContext with the TrustManager
        val sslContext = SSLContext.getInstance("TLS")
        sslContext.init(null, trustManagers, null)

        val loggingInterceptor = HttpLoggingInterceptor().apply {
            //level = HttpLoggingInterceptor.Level.BODY // You can change the level as needed
            //level = HttpLoggingInterceptor.Level.HEADERS
        }

        return OkHttpClient.Builder()
            .sslSocketFactory(sslContext.socketFactory, trustManagers[0] as X509TrustManager)
            .hostnameVerifier { _, _ -> true } // Disable hostname verification (development only). Comentar en produccion
            .build()
    }
     */
